<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE database SYSTEM "http://dbflute.org/meta/database.dtd">
<!-- Auto-generated by JDBC task! -->
<database name="">
    <table
        comment="会員 : 会員のプロフィールやアカウントなどの基本情報を保持する。&#xa;基本的に物理削除はなく、退会したらステータスが退会会員になる。&#xa;ライフサイクルやカテゴリの違う会員情報は、one-to-oneなどの関連テーブルにて。"
        name="member" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column autoIncrement="true"
            comment="会員ID : 連番として自動採番される。会員IDだけに限らず採番方法はDBMS次第。"
            dbType="INT" javaType="Integer" name="MEMBER_ID"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="10" type="INTEGER"/>
        <column
            comment="会員名称 : 会員のフルネームの名称。&#xa;苗字と名前を分けて管理することが多いが、ここでは単純にひとまとめ。"
            dbType="VARCHAR" javaType="String" name="MEMBER_NAME"
            required="true" size="100" type="VARCHAR"/>
        <column
            comment="会員アカウント : ログインIDとして利用する。&#xa;昨今メールアドレスをログインIDとすることが多いので、あまり見かけないかも!?"
            dbType="VARCHAR" javaType="String" name="MEMBER_ACCOUNT"
            required="true" size="50" type="VARCHAR"/>
        <column
            comment="会員ステータスコード : 会員ステータスを参照するコード。&#xa;ステータスが変わるたびに、このカラムが更新される。"
            dbType="CHAR" javaType="String" name="MEMBER_STATUS_CODE"
            required="true" size="3" type="CHAR"/>
        <column
            comment="正式会員日時 : 会員が正式に確定した(正式会員になった)日時。&#xa;一度確定したらもう二度と更新されないはずだ！"
            dbType="DATETIME" javaType="java.time.LocalDateTime"
            name="FORMALIZED_DATETIME" size="19" type="TIMESTAMP"/>
        <column comment="生年月日 : 必須項目ではないので、このデータがない会員もいる。" dbType="DATE"
            javaType="java.time.LocalDate" name="BIRTHDATE" size="10" type="DATE"/>
        <column comment="登録日時 : レコードが登録された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="REGISTER_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="登録ユーザー : レコードを登録したユーザー" dbType="VARCHAR"
            javaType="String" name="REGISTER_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="更新日時 : レコードが(最後に)更新された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="UPDATE_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="更新ユーザー : レコードを(最後に)更新したユーザー" dbType="VARCHAR"
            javaType="String" name="UPDATE_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="バージョン番号 : 排他制御用、更新されるごとにインクリメントされる"
            dbType="BIGINT" javaType="Long" name="VERSION_NO"
            required="true" size="19" type="BIGINT"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member_status" name="FK_MEMBER_MEMBER_STATUS">
            <reference foreign="MEMBER_STATUS_CODE" local="MEMBER_STATUS_CODE"/>
        </foreign-key>
        <unique name="MEMBER_ACCOUNT">
            <unique-column name="MEMBER_ACCOUNT" position="1"/>
        </unique>
        <index name="FK_MEMBER_MEMBER_STATUS">
            <index-column name="MEMBER_STATUS_CODE" position="1"/>
        </index>
        <index name="IX_MEMBER_FORMALIZED_DATETIME">
            <index-column name="FORMALIZED_DATETIME" position="1"/>
        </index>
        <index name="IX_MEMBER_MEMBER_NAME">
            <index-column name="MEMBER_NAME" position="1"/>
        </index>
    </table>
    <table
        comment="会員住所情報 : 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。&#xa;会員を基点に考えた場合、構造的には one-to-many だが、業務的な定型条件で one-to-one になる。このような構造を「業務的one-to-one」と呼ぶ！&#xa;有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) &quot;1 : 0..1&quot; である。"
        name="member_address" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column autoIncrement="true"
            comment="会員住所ID : 会員住所を識別するID。&#xa;期間ごとに同じ会員のデータを保持することがあるため、これは単なるPKであってFKではない。"
            dbType="INT" javaType="Integer" name="MEMBER_ADDRESS_ID"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="10" type="INTEGER"/>
        <column
            comment="会員ID : 会員を参照するID。&#xa;期間ごとのデータがあるので、これだけではユニークにはならない。有効開始日と合わせて複合ユニーク制約となるが、厳密には完全な制約にはなっていない。有効期間の概念はRDBでは表現しきれないのである。"
            dbType="INT" javaType="Integer" name="MEMBER_ID"
            required="true" size="10" type="INTEGER"/>
        <column
            comment="有効開始日 : 一つの有効期間の開始を示す日付。&#xa;前の有効終了日の次の日の値が格納される。"
            dbType="DATE" javaType="java.time.LocalDate"
            name="VALID_BEGIN_DATE" required="true" size="10" type="DATE"/>
        <column
            comment="有効終了日 : 有効期間の終了日。&#xa;期間の最後の日が格納される。基本的に、次の有効開始日の一日前の値となるが、次の有効期間がない場合は 9999/12/31 となる。"
            dbType="DATE" javaType="java.time.LocalDate"
            name="VALID_END_DATE" required="true" size="10" type="DATE"/>
        <column comment="住所 : まるごと住所" dbType="VARCHAR" javaType="String"
            name="ADDRESS" required="true" size="200" type="VARCHAR"/>
        <column comment="地域ID : 地域を参照するID。かなり漠然とした地域。" dbType="INT"
            javaType="Integer" name="REGION_ID" required="true"
            size="10" type="INTEGER"/>
        <column comment="登録日時 : レコードが登録された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="REGISTER_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="登録ユーザー : レコードを登録したユーザー" dbType="VARCHAR"
            javaType="String" name="REGISTER_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="更新日時 : レコードが(最後に)更新された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="UPDATE_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="更新ユーザー : レコードを(最後に)更新したユーザー" dbType="VARCHAR"
            javaType="String" name="UPDATE_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="バージョン番号 : 排他制御用、更新されるごとにインクリメントされる"
            dbType="BIGINT" javaType="Long" name="VERSION_NO"
            required="true" size="19" type="BIGINT"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member" name="FK_MEMBER_ADDRESS_MEMBER">
            <reference foreign="MEMBER_ID" local="MEMBER_ID"/>
        </foreign-key>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="region" name="FK_MEMBER_ADDRESS_REGION">
            <reference foreign="REGION_ID" local="REGION_ID"/>
        </foreign-key>
        <unique name="UQ_MEMBER_ADDRESS">
            <unique-column name="MEMBER_ID" position="1"/>
            <unique-column name="VALID_BEGIN_DATE" position="2"/>
        </unique>
        <index name="FK_MEMBER_ADDRESS_REGION">
            <index-column name="REGION_ID" position="1"/>
        </index>
    </table>
    <table
        comment="会員フォローイング : とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。"
        name="member_following" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column autoIncrement="true" comment="会員フォローイングID : 連番"
            dbType="BIGINT" javaType="Long" name="MEMBER_FOLLOWING_ID"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="19" type="BIGINT"/>
        <column comment="わたし : 気になった人がいて...勇気を振り絞った会員のID。" dbType="INT"
            javaType="Integer" name="MY_MEMBER_ID" required="true"
            size="10" type="INTEGER"/>
        <column comment="あなた : いきなりのアクションに...ちょっと心揺らいだ会員のID。"
            dbType="INT" javaType="Integer" name="YOUR_MEMBER_ID"
            required="true" size="10" type="INTEGER"/>
        <column comment="その瞬間 : ふりかえるとちょっと恥ずかしい気持ちになる日時"
            dbType="DATETIME" javaType="java.time.LocalDateTime"
            name="FOLLOW_DATETIME" required="true" size="19" type="TIMESTAMP"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member" name="FK_MEMBER_FOLLOWING_MY_MEMBER_ID">
            <reference foreign="MEMBER_ID" local="MY_MEMBER_ID"/>
        </foreign-key>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member" name="FK_MEMBER_FOLLOWING_YOUR_MEMBER_ID">
            <reference foreign="MEMBER_ID" local="YOUR_MEMBER_ID"/>
        </foreign-key>
        <unique name="UQ_MEMBER_FOLLOWING">
            <unique-column name="MY_MEMBER_ID" position="1"/>
            <unique-column name="YOUR_MEMBER_ID" position="2"/>
        </unique>
        <index name="IX_MEMBER_FOLLOWING_DATETIME">
            <index-column name="FOLLOW_DATETIME" position="1"/>
        </index>
        <index name="IX_MEMBER_FOLLOWING_YOUR_MEMBER">
            <index-column name="YOUR_MEMBER_ID" position="1"/>
        </index>
    </table>
    <table
        comment="会員ログイン : ログインするたびに登録されるログイン履歴。&#xa;登録されたら更新されるも削除されることもない。さらには、登録する人もプログラムもはっきりしているので、(紙面の都合上もあって)ここでは共通カラムは省略している。"
        name="member_login" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column autoIncrement="true" comment="会員ログインID" dbType="BIGINT"
            javaType="Long" name="MEMBER_LOGIN_ID" pkName="PRIMARY"
            pkPosition="1" primaryKey="true" required="true" size="19" type="BIGINT"/>
        <column comment="会員ID : 連番として自動採番される。会員IDだけに限らず採番方法はDBMS次第。"
            dbType="INT" javaType="Integer" name="MEMBER_ID"
            required="true" size="10" type="INTEGER"/>
        <column
            comment="ログイン日時 : ログインした瞬間の日時。&#xa;同じ会員が同じ日時にログインはできない。(ユニーク制約で重複ログインできないようにしてある)"
            dbType="DATETIME" javaType="java.time.LocalDateTime"
            name="LOGIN_DATETIME" required="true" size="19" type="TIMESTAMP"/>
        <column comment="モバイルログインフラグ : モバイル機器からのログインか否か。" dbType="INT"
            javaType="Integer" name="MOBILE_LOGIN_FLG" required="true"
            size="10" type="INTEGER"/>
        <column comment="ログイン会員ステータスコード : ログイン時の会員ステータス" dbType="CHAR"
            javaType="String" name="LOGIN_MEMBER_STATUS_CODE"
            required="true" size="3" type="CHAR"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member_status" name="FK_MEMBER_LOGIN_MEMBER_STATUS">
            <reference foreign="MEMBER_STATUS_CODE" local="LOGIN_MEMBER_STATUS_CODE"/>
        </foreign-key>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member" name="FK_MEMBER_LOGIN_MEMBER">
            <reference foreign="MEMBER_ID" local="MEMBER_ID"/>
        </foreign-key>
        <unique name="UQ_MEMBER_LOGIN">
            <unique-column name="MEMBER_ID" position="1"/>
            <unique-column name="LOGIN_DATETIME" position="2"/>
        </unique>
        <index name="FK_MEMBER_LOGIN_MEMBER_STATUS">
            <index-column name="LOGIN_MEMBER_STATUS_CODE" position="1"/>
        </index>
        <index name="IX_MEMBER_LOGIN_DATETIME">
            <index-column name="LOGIN_DATETIME" position="1"/>
        </index>
    </table>
    <table
        comment="会員セキュリティ : 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある"
        name="member_security" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column comment="会員ID : そのまま one-to-one を構成するためのFKとなる。"
            dbType="INT" javaType="Integer" name="MEMBER_ID"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="10" type="INTEGER"/>
        <column
            comment="ログインパスワード : ログイン時に利用するパスワード。&#xa;本当は良くないが、Exampleなのでひとまず暗号化していない。"
            dbType="VARCHAR" javaType="String" name="LOGIN_PASSWORD"
            required="true" size="100" type="VARCHAR"/>
        <column comment="リマインダ質問 : パスワードを忘れた際のリマインダ機能における質問の内容。"
            dbType="VARCHAR" javaType="String" name="REMINDER_QUESTION"
            required="true" size="50" type="VARCHAR"/>
        <column comment="リマインダ回答 : パスワードを忘れた際のリマインダ機能における質問の答え。"
            dbType="VARCHAR" javaType="String" name="REMINDER_ANSWER"
            required="true" size="50" type="VARCHAR"/>
        <column
            comment="リマインダ利用回数 : リマインダを利用した回数。&#xa;これが多いと忘れっぽい会員と言えるが、そんなことを知ってもしょうがない。"
            dbType="INT" javaType="Integer" name="REMINDER_USE_COUNT"
            required="true" size="10" type="INTEGER"/>
        <column comment="登録日時 : レコードが登録された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="REGISTER_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="登録ユーザー : レコードを登録したユーザー" dbType="VARCHAR"
            javaType="String" name="REGISTER_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="更新日時 : レコードが(最後に)更新された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="UPDATE_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="更新ユーザー : レコードを(最後に)更新したユーザー" dbType="VARCHAR"
            javaType="String" name="UPDATE_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="バージョン番号 : 排他制御用、更新されるごとにインクリメントされる"
            dbType="BIGINT" javaType="Long" name="VERSION_NO"
            required="true" size="19" type="BIGINT"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member" name="FK_MEMBER_SECURITY_MEMBER">
            <reference foreign="MEMBER_ID" local="MEMBER_ID"/>
        </foreign-key>
    </table>
    <table
        comment="会員サービス : 会員のサービス情報（ポイントサービスなど）。&#xa;テストケースのために、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。"
        name="member_service" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column autoIncrement="true"
            comment="会員サービスID : 独立した主キーとなるが、実質的に会員IDとは one-to-one である。"
            dbType="INT" javaType="Integer" name="MEMBER_SERVICE_ID"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="10" type="INTEGER"/>
        <column comment="会員ID : 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。"
            dbType="INT" javaType="Integer" name="MEMBER_ID"
            required="true" size="10" type="INTEGER"/>
        <column comment="サービスポイント数 : 購入したら増えて使ったら減る。" dbType="INT"
            javaType="Integer" name="SERVICE_POINT_COUNT"
            required="true" size="10" type="INTEGER"/>
        <column comment="サービスランクコード : どんなランクがあるのかドキドキですね。" dbType="CHAR"
            javaType="String" name="SERVICE_RANK_CODE" required="true"
            size="3" type="CHAR"/>
        <column comment="登録日時 : レコードが登録された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="REGISTER_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="登録ユーザー : レコードを登録したユーザー" dbType="VARCHAR"
            javaType="String" name="REGISTER_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="更新日時 : レコードが(最後に)更新された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="UPDATE_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="更新ユーザー : レコードを(最後に)更新したユーザー" dbType="VARCHAR"
            javaType="String" name="UPDATE_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="バージョン番号 : 排他制御用、更新されるごとにインクリメントされる"
            dbType="BIGINT" javaType="Long" name="VERSION_NO"
            required="true" size="19" type="BIGINT"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member" name="FK_MEMBER_SERVICE_MEMBER">
            <reference foreign="MEMBER_ID" local="MEMBER_ID"/>
        </foreign-key>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="service_rank" name="FK_MEMBER_SERVICE_SERVICE_RANK_CODE">
            <reference foreign="SERVICE_RANK_CODE" local="SERVICE_RANK_CODE"/>
        </foreign-key>
        <unique name="MEMBER_ID">
            <unique-column name="MEMBER_ID" position="1"/>
        </unique>
        <index name="FK_MEMBER_SERVICE_SERVICE_RANK_CODE">
            <index-column name="SERVICE_RANK_CODE" position="1"/>
        </index>
        <index name="IX_MEMBER_SERVICE_POINT_COUNT">
            <index-column name="SERVICE_POINT_COUNT" position="1"/>
        </index>
    </table>
    <table
        comment="会員ステータス : 会員のステータスを示す固定的なマスタテーブル。いわゆるテーブル区分値！&#xa;業務運用上で増えることはなく、増減するときはプログラム修正ともなうレベルの業務変更と考えられる。&#xa;&#xa;こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるというところで割り切っている。実業務では統一的に定義することもある。"
        name="member_status" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column
            comment="会員ステータスコード : 会員ステータスを識別するコード。&#xa;固定的なデータなので連番とか番号にはせず、データを直接見たときも人が直感的にわかるように、例えば &quot;FML&quot; とかの３桁のコード形式にしている。(3って何会員だっけ？とかの問答をやりたくないので)&#xa;"
            dbType="CHAR" javaType="String" name="MEMBER_STATUS_CODE"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="3" type="CHAR"/>
        <column
            comment="会員ステータス名称 : 表示用の名称。&#xa;国際化対応するときはもっと色々考える必要があるかと...ということで英語名カラムがないので、そのまま区分値メソッド名の一部としても利用される。"
            dbType="VARCHAR" javaType="String" name="MEMBER_STATUS_NAME"
            required="true" size="50" type="VARCHAR"/>
        <column
            comment="説明 : 会員ステータスそれぞれの説明。&#xa;区分値の一つ一つの要素に気の利いた説明があるとディベロッパーがとても助かるので絶対に欲しい。"
            dbType="VARCHAR" javaType="String" name="DESCRIPTION"
            required="true" size="200" type="VARCHAR"/>
        <column
            comment="表示順 : UI上のステータスの表示順を示すNO。&#xa;並べるときは、このカラムに対して昇順のソート条件にする。"
            dbType="INT" javaType="Integer" name="DISPLAY_ORDER"
            required="true" size="10" type="INTEGER"/>
        <unique name="DISPLAY_ORDER">
            <unique-column name="DISPLAY_ORDER" position="1"/>
        </unique>
    </table>
    <table
        comment="会員退会情報 : 退会会員の退会に関する詳細な情報。&#xa;退会会員のみデータが存在し、&quot;1 : 0..1&quot; のパターンの one-to-one である。&#xa;共通カラムがあってバージョンNOがないパターン。&#xa;基本的に更新は入らないが、重要なデータなので万が一のために更新系の共通カラムも。"
        name="member_withdrawal" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column comment="会員ID : 連番として自動採番される。会員IDだけに限らず採番方法はDBMS次第。"
            dbType="INT" javaType="Integer" name="MEMBER_ID"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="10" type="INTEGER"/>
        <column
            comment="退会理由コード : 定型的な退会した理由を参照するコード。&#xa;何も言わずに退会する会員もいるので必須項目ではない。"
            dbType="CHAR" javaType="String"
            name="WITHDRAWAL_REASON_CODE" size="3" type="CHAR"/>
        <column
            comment="退会理由入力テキスト : 会員がフリーテキストで入力できる退会理由。&#xa;もう言いたいこと言ってもらう感じ。サイト運営側としてはこういうのは真摯に受け止めて改善していきたいところ。"
            dbType="TEXT" javaType="String"
            name="WITHDRAWAL_REASON_INPUT_TEXT" size="65535" type="LONGVARCHAR"/>
        <column
            comment="退会日時 : 退会した瞬間の日時。&#xa;正式会員日時と違い、こっちは one-to-one の別テーブルで管理されている。"
            dbType="DATETIME" javaType="java.time.LocalDateTime"
            name="WITHDRAWAL_DATETIME" required="true" size="19" type="TIMESTAMP"/>
        <column comment="登録日時 : レコードが登録された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="REGISTER_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="登録ユーザー : レコードを登録したユーザー" dbType="VARCHAR"
            javaType="String" name="REGISTER_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="更新日時 : レコードが(最後に)更新された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="UPDATE_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="更新ユーザー : レコードを(最後に)更新したユーザー" dbType="VARCHAR"
            javaType="String" name="UPDATE_USER" required="true"
            size="200" type="VARCHAR"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member" name="FK_MEMBER_WITHDRAWAL_MEMBER">
            <reference foreign="MEMBER_ID" local="MEMBER_ID"/>
        </foreign-key>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="withdrawal_reason" name="FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON">
            <reference foreign="WITHDRAWAL_REASON_CODE" local="WITHDRAWAL_REASON_CODE"/>
        </foreign-key>
        <index name="FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON">
            <index-column name="WITHDRAWAL_REASON_CODE" position="1"/>
        </index>
    </table>
    <table comment="商品" name="product"
        schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column autoIncrement="true" comment="商品ID" dbType="INT"
            javaType="Integer" name="PRODUCT_ID" pkName="PRIMARY"
            pkPosition="1" primaryKey="true" required="true" size="10" type="INTEGER"/>
        <column
            comment="商品名称 : ExampleDBとして、コメントの少ないケースを表現するため、あえてコメントを控えている。&#xa;実業務ではしっかりとコメントを入れることが強く強く推奨される。「よりによってこのテーブルでやらないでよ！」あわわ、何も聞こえません〜"
            dbType="VARCHAR" javaType="String" name="PRODUCT_NAME"
            required="true" size="50" type="VARCHAR"/>
        <column
            comment="商品ハンドルコード : これだけは書いておこう、商品を識別する業務上のコード。よく品番とか言うかもしれませんねぇ..."
            dbType="VARCHAR" javaType="String"
            name="PRODUCT_HANDLE_CODE" required="true" size="100" type="VARCHAR"/>
        <column comment="商品カテゴリコード : 自分のテーブルの別のレコードからも参照される。"
            dbType="CHAR" javaType="String" name="PRODUCT_CATEGORY_CODE"
            required="true" size="3" type="CHAR"/>
        <column comment="商品ステータスコード : 商品ステータスを識別するコード。" dbType="CHAR"
            javaType="String" name="PRODUCT_STATUS_CODE" required="true"
            size="3" type="CHAR"/>
        <column comment="定価" dbType="INT" javaType="Integer"
            name="REGULAR_PRICE" required="true" size="10" type="INTEGER"/>
        <column comment="登録日時 : レコードが登録された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="REGISTER_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="登録ユーザー : レコードを登録したユーザー" dbType="VARCHAR"
            javaType="String" name="REGISTER_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="更新日時 : レコードが(最後に)更新された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="UPDATE_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="更新ユーザー : レコードを(最後に)更新したユーザー" dbType="VARCHAR"
            javaType="String" name="UPDATE_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="バージョン番号 : 排他制御用、更新されるごとにインクリメントされる"
            dbType="BIGINT" javaType="Long" name="VERSION_NO"
            required="true" size="19" type="BIGINT"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="product_category" name="FK_PRODUCT_PRODUCT_CATEGORY">
            <reference foreign="PRODUCT_CATEGORY_CODE" local="PRODUCT_CATEGORY_CODE"/>
        </foreign-key>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="product_status" name="FK_PRODUCT_PRODUCT_STATUS">
            <reference foreign="PRODUCT_STATUS_CODE" local="PRODUCT_STATUS_CODE"/>
        </foreign-key>
        <unique name="PRODUCT_HANDLE_CODE">
            <unique-column name="PRODUCT_HANDLE_CODE" position="1"/>
        </unique>
        <index name="FK_PRODUCT_PRODUCT_CATEGORY">
            <index-column name="PRODUCT_CATEGORY_CODE" position="1"/>
        </index>
        <index name="FK_PRODUCT_PRODUCT_STATUS">
            <index-column name="PRODUCT_STATUS_CODE" position="1"/>
        </index>
        <index name="IX_PRODUCT_PRODUCT_NAME">
            <index-column name="PRODUCT_NAME" position="1"/>
        </index>
    </table>
    <table comment="商品カテゴリ : 商品のカテゴリを表現するマスタ。自己参照FKの階層になっている。"
        name="product_category" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column comment="商品カテゴリコード : 自分のテーブルの別のレコードからも参照される。"
            dbType="CHAR" javaType="String" name="PRODUCT_CATEGORY_CODE"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="3" type="CHAR"/>
        <column comment="商品カテゴリ名称" dbType="VARCHAR" javaType="String"
            name="PRODUCT_CATEGORY_NAME" required="true" size="50" type="VARCHAR"/>
        <column comment="親カテゴリコード : 最上位の場合はデータなし。まさひく自己参照FKカラム！"
            dbType="CHAR" javaType="String" name="PARENT_CATEGORY_CODE"
            size="3" type="CHAR"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="product_category" name="FK_PRODUCT_CATEGORY_PARENT">
            <reference foreign="PRODUCT_CATEGORY_CODE" local="PARENT_CATEGORY_CODE"/>
        </foreign-key>
        <index name="FK_PRODUCT_CATEGORY_PARENT">
            <index-column name="PARENT_CATEGORY_CODE" position="1"/>
        </index>
    </table>
    <table comment="商品ステータス : 商品のステータスを表現する固定的なマスタ。"
        name="product_status" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column comment="商品ステータスコード : 商品ステータスを識別するコード。" dbType="CHAR"
            javaType="String" name="PRODUCT_STATUS_CODE"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="3" type="CHAR"/>
        <column
            comment="商品ステータス名称 : 表示用の名称、英語名カラムがないのでそのままメソッド名の一部としても利用される。"
            dbType="VARCHAR" javaType="String"
            name="PRODUCT_STATUS_NAME" required="true" size="50" type="VARCHAR"/>
        <column comment="表示順 : もう、ご想像の通りです。" dbType="INT"
            javaType="Integer" name="DISPLAY_ORDER" required="true"
            size="10" type="INTEGER"/>
        <unique name="DISPLAY_ORDER">
            <unique-column name="DISPLAY_ORDER" position="1"/>
        </unique>
    </table>
    <table
        comment="購入 : 一つの商品に対する購入を表現する(購入履歴とも言える)。&#xa;実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。"
        name="purchase" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column autoIncrement="true" comment="購入ID :  連番"
            dbType="BIGINT" javaType="Long" name="PURCHASE_ID"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="19" type="BIGINT"/>
        <column
            comment="会員ID : 会員を参照するID。&#xa;購入を識別する自然キー(複合ユニーク制約)の筆頭要素。"
            dbType="INT" javaType="Integer" name="MEMBER_ID"
            required="true" size="10" type="INTEGER"/>
        <column comment="商品ID : あなたは何を買ったのか？" dbType="INT"
            javaType="Integer" name="PRODUCT_ID" required="true"
            size="10" type="INTEGER"/>
        <column comment="購入日時 : 購入した瞬間の日時。" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="PURCHASE_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="購入数量 : 購入した商品の一回の購入における数量。" dbType="INT"
            javaType="Integer" name="PURCHASE_COUNT" required="true"
            size="10" type="INTEGER"/>
        <column
            comment="購入価格 : 購入によって実際に会員が支払った（支払う予定の）価格。&#xa;基本は商品の定価に購入数量を掛けたものになるが、ポイント利用や割引があったりと必ずしもそうはならない。"
            dbType="INT" javaType="Integer" name="PURCHASE_PRICE"
            required="true" size="10" type="INTEGER"/>
        <column comment="支払完了フラグ : この購入に関しての支払いが完了しているか否か。" dbType="INT"
            javaType="Integer" name="PAYMENT_COMPLETE_FLG"
            required="true" size="10" type="INTEGER"/>
        <column comment="登録日時 : レコードが登録された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="REGISTER_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="登録ユーザー : レコードを登録したユーザー" dbType="VARCHAR"
            javaType="String" name="REGISTER_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="更新日時 : レコードが(最後に)更新された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="UPDATE_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="更新ユーザー : レコードを(最後に)更新したユーザー" dbType="VARCHAR"
            javaType="String" name="UPDATE_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="バージョン番号 : 排他制御用、更新されるごとにインクリメントされる"
            dbType="BIGINT" javaType="Long" name="VERSION_NO"
            required="true" size="19" type="BIGINT"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="member" name="FK_PURCHASE_MEMBER">
            <reference foreign="MEMBER_ID" local="MEMBER_ID"/>
        </foreign-key>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="product" name="FK_PURCHASE_PRODUCT">
            <reference foreign="PRODUCT_ID" local="PRODUCT_ID"/>
        </foreign-key>
        <unique name="UQ_PURCHASE">
            <unique-column name="MEMBER_ID" position="1"/>
            <unique-column name="PRODUCT_ID" position="2"/>
            <unique-column name="PURCHASE_DATETIME" position="3"/>
        </unique>
        <index name="IX_PURCHASE_DATETIME_MEMBER">
            <index-column name="PURCHASE_DATETIME" position="1"/>
            <index-column name="MEMBER_ID" position="2"/>
        </index>
        <index name="IX_PURCHASE_MEMBER_ID">
            <index-column name="MEMBER_ID" position="1"/>
        </index>
        <index name="IX_PURCHASE_PRICE">
            <index-column name="PURCHASE_PRICE" position="1"/>
        </index>
        <index name="IX_PURCHASE_PRODUCT_DATETIME">
            <index-column name="PRODUCT_ID" position="1"/>
            <index-column name="PURCHASE_DATETIME" position="2"/>
        </index>
        <index name="IX_PURCHASE_PRODUCT_ID">
            <index-column name="PRODUCT_ID" position="1"/>
        </index>
    </table>
    <table
        comment="購入支払 : 購入に対する支払。&#xa;分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。"
        name="purchase_payment" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column autoIncrement="true" comment="購入支払ID : 連番"
            dbType="BIGINT" javaType="Long" name="PURCHASE_PAYMENT_ID"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="19" type="BIGINT"/>
        <column comment="購入ID : 支払い対象の購入へのID" dbType="BIGINT"
            javaType="Long" name="PURCHASE_ID" required="true" size="19" type="BIGINT"/>
        <column comment="支払金額 : 支払った金額。さて、小数点なのはなぜでしょう？"
            dbType="DECIMAL" javaType="java.math.BigDecimal"
            name="PAYMENT_AMOUNT" required="true" size="10, 2" type="DECIMAL"/>
        <column comment="支払日時 : 支払ったときの日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="PAYMENT_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="支払方法コード : 手渡しや銀行振込など" dbType="CHAR"
            javaType="String" name="PAYMENT_METHOD_CODE" required="true"
            size="3" type="CHAR"/>
        <column comment="登録日時 : レコードが登録された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="REGISTER_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="登録ユーザー : レコードを登録したユーザー" dbType="VARCHAR"
            javaType="String" name="REGISTER_USER" required="true"
            size="200" type="VARCHAR"/>
        <column comment="更新日時 : レコードが(最後に)更新された日時" dbType="DATETIME"
            javaType="java.time.LocalDateTime" name="UPDATE_DATETIME"
            required="true" size="19" type="TIMESTAMP"/>
        <column comment="更新ユーザー : レコードを(最後に)更新したユーザー" dbType="VARCHAR"
            javaType="String" name="UPDATE_USER" required="true"
            size="200" type="VARCHAR"/>
        <foreign-key foreignSchema="maihamadb.$$NoNameSchema$$"
            foreignTable="purchase" name="FK_PURCHASE_PAYMENT_PURCHASE">
            <reference foreign="PURCHASE_ID" local="PURCHASE_ID"/>
        </foreign-key>
        <index name="FK_PURCHASE_PAYMENT_PURCHASE">
            <index-column name="PURCHASE_ID" position="1"/>
        </index>
        <index name="IX_PURCHASE_PAYMENT_DATETIME">
            <index-column name="PAYMENT_DATETIME" position="1"/>
            <index-column name="PAYMENT_AMOUNT" position="2"/>
        </index>
    </table>
    <table
        comment="地域 : 主に会員の住所に対応する漠然とした地域。&#xa;かなりざっくりした感じではある。唯一の業務的one-to-oneの親テーブルのケース。"
        name="region" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column
            comment="地域ID : 地域をしっかりと識別するID。&#xa;珍しく(固定的な)マスタテーブルとしては数値だが、Exampleなのでやはり色々なパターンがないとね、ってところで。"
            dbType="INT" javaType="Integer" name="REGION_ID"
            pkName="PRIMARY" pkPosition="1" primaryKey="true"
            required="true" size="10" type="INTEGER"/>
        <column comment="地域名称 : 地域を漠然と表す名称。" dbType="VARCHAR"
            javaType="String" name="REGION_NAME" required="true"
            size="50" type="VARCHAR"/>
    </table>
    <table comment="サービスランク : 会員のサービスレベルを表現するランク。(ゴールドとかプラチナとか)"
        name="service_rank" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column comment="サービスランクコード : サービスランクを識別するコード。" dbType="CHAR"
            javaType="String" name="SERVICE_RANK_CODE" pkName="PRIMARY"
            pkPosition="1" primaryKey="true" required="true" size="3" type="CHAR"/>
        <column
            comment="サービスランク名称 : サービスランクの名称。&#xa;ゴールドとかプラチナとか基本的には威厳のある名前"
            dbType="VARCHAR" javaType="String" name="SERVICE_RANK_NAME"
            required="true" size="50" type="VARCHAR"/>
        <column
            comment="サービスポイント発生率 : 購入ごとのサービスポイントの発生率。&#xa;購入価格にこの値をかけた数が発生ポイント。ExampleDBとして数少ない貴重な小数点ありのカラム。"
            dbType="DECIMAL" javaType="java.math.BigDecimal"
            name="SERVICE_POINT_INCIDENCE" required="true" size="5, 3" type="DECIMAL"/>
        <column comment="新規受け入れ可能フラグ : このランクへの新規受け入れができるかどうか。"
            dbType="INT" javaType="Integer" name="NEW_ACCEPTABLE_FLG"
            required="true" size="10" type="INTEGER"/>
        <column comment="説明 : ランクに関する業務的な説明。" dbType="VARCHAR"
            javaType="String" name="DESCRIPTION" required="true"
            size="200" type="VARCHAR"/>
        <column comment="表示順 : UI上の表示順を表現する番号。" dbType="INT"
            javaType="Integer" name="DISPLAY_ORDER" required="true"
            size="10" type="INTEGER"/>
        <unique name="DISPLAY_ORDER">
            <unique-column name="DISPLAY_ORDER" position="1"/>
        </unique>
    </table>
    <table comment="退会理由 : 会員に選ばせる定型的な退会理由のマスタ。そういえば、これ表示順カラムがないですねぇ..."
        name="withdrawal_reason" schema="maihamadb.$$NoNameSchema$$" type="TABLE">
        <column comment="退会理由コード" dbType="CHAR" javaType="String"
            name="WITHDRAWAL_REASON_CODE" pkName="PRIMARY"
            pkPosition="1" primaryKey="true" required="true" size="3" type="CHAR"/>
        <column
            comment="退会理由テキスト : 退会理由の内容。&#xa;テキスト形式なので目いっぱい書けるが、そうするとUI側できれいに見せるのが大変でしょうね。"
            dbType="TEXT" javaType="String"
            name="WITHDRAWAL_REASON_TEXT" required="true" size="65535" type="LONGVARCHAR"/>
        <column comment="表示順 : もう、ご想像の通りです。" dbType="INT"
            javaType="Integer" name="DISPLAY_ORDER" required="true"
            size="10" type="INTEGER"/>
        <unique name="DISPLAY_ORDER">
            <unique-column name="DISPLAY_ORDER" position="1"/>
        </unique>
    </table>
    <procedureGroup/>
</database>
